name: Image

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  APP_NAME: ${{ github.repository }}

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2


      # get image tag and prefix
      - run: |
          echo ::set-output IMAGE_NAME_CLIENT=tag::$(node -p "require('./package.json').version")-${GITHUB_SHA::8}
          echo ::set-output IMAGE_NAME_CLIENT=prefix::natush/recipe-app-client
        working-directory: ./client
        id: image-client
      - run: |
          echo ::set-output IMAGE_NAME_SERVER=tag::$(node -p "require('./package.json').version")-${GITHUB_SHA::8}
          echo ::set-output IMAGE_NAME_SERVER=prefix::natush/recipe-app-server
        working-directory: ./server
        id: image-server

      # build
      - run: |
          ## in actual environment needs to clean images to ensure stability, but for quickness comment out it
          # docker images -a --format "{{.ID}}" | xargs -I {} docker rmi {}
          docker build . -t ${{ steps.image-client.outputs.prefix }}:${{ steps.image-client.outputs.tag }}
          docker tag ${{ steps.image-client.outputs.prefix }}:${{ steps.image-client.outputs.tag }} ${{ steps.image-client.outputs.prefix }}:latest
        working-directory: ./client
      - run: |
          ## in actual environment needs to clean images to ensure stability, but for quickness comment out it
          # docker images -a --format "{{.ID}}" | xargs -I {} docker rmi {}
          docker build . -t ${{ steps.image-server.outputs.prefix }}:${{ steps.image-server.outputs.tag }}
          docker tag ${{ steps.image-server.outputs.prefix }}:${{ steps.image-server.outputs.tag }} ${{ steps.image-server.outputs.prefix }}:latest
        working-directory: ./server

      # publish
      - run: |
          docker login --username "${DOCKERHUB_USERNAME}" --password "${DOCKERHUB_TOKEN}"
          docker push ${{ steps.image-client.outputs.prefix }}:latest
          docker push ${{ steps.image-client.outputs.prefix }}:${{ steps.image-client.outputs.tag }}
          docker push ${{ steps.image-server.outputs.prefix }}:latest
          docker push ${{ steps.image-server.outputs.prefix }}:${{ steps.image-server.outputs.tag }}
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
